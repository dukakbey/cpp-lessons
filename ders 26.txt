ders 26
***************************************
konular: inline namespace,std::string
*****************************************

std::string :
	-Kütüphaneye eklenen string_view ve regex sınıfı yine std::string sınıfı ile ilgili. 
	-STL container olma özelliğine sahip.
	

Bir STL Class kullanırken neleri bilmeliyiz:
	-member functions

SSO: Small String Optimization. Küçük stringler buffer'da tutuluyor. Bellek ayrılmıyor.

Low Latency ? 
-string nesnesi pointer'lar tutar. Yazı ise dinamik bellek alanında tutulur.

!!!for döngüsü içinde yapılan str.push_back('A') sürekli realocation yapar ve kaçınılmalıdır. str.reserve(100) fonksiyonu ile bellek alanı belirtilirse bu önlenebilir. dezavantajlar:
	- push_back ile yeni bellek bloğuna kopyalama maliyeti
	- eski bellek bloğu geri verilecek onun da ciddi bir maliyeti var.
	- dinamik bellek bloğunda yeni bellek yapısı aranacak bulunacak.

jossutis'in STL kitabını oku.
parametrik yapılar:
	-str.xxx(const char *p)cstring: sizden null terminating parametre istiyor.string literal demek const char dizi demektir.
	-str.xxx(const char *p,string::size_type):data. bu adresten başlayarak bu kadar karakter.
	-str.xxx(const char *ps,const char *pe)
	-str.xxx(const string&) string parametre
	-str.xxx(const string&,string::size_type idx) substring
	-str.xxx(const string&,string::size_type idx,s tring::size_type n) substring n tane
	-str.xxx(string&&) string parametre
	-str.xxx(string::size_type,char) fill parametre
	-str.xxx(initializer_list<char>); //fill param

- size_t : index türü. Adres değil
- str.size() ile str.length() arasında fark yok.
- str.size() ve str.capacity() farklıdır. capacity alocate edilmiş bellek bloğunun size'ını verir.size ise bizim kullanıdığımız miktarı verir.

- str.assign(300'000,'a');
- str.erase(50) : 50. index sonrası karakterleri siler. Fakat kapasite değişmez(düşmez).

- str.shirink_to_fit();